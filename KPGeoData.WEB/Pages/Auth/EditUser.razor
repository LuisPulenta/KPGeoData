@page "/EditUser"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (user is null)
{
    <div class="spinner" />
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Editar Usuario
                    <a class="btn btn-sm btn-secondary float-end" href="/changePassword"><i class="oi oi-key" /> Cambiar Contraseña</a>
                    <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Nombres:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Documento:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.Document" />
                                <ValidationMessage For="@(() => user.Document)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                    </div>
                    @*<div class="col-6">
                <div class="mb-3">
                <label>Empresa:</label>
                <div>
                <select class="form-select" @onchange="CompanyChangedAsync">
                <option value="0">-- Seleccione una Empresa --</option>
                @if (companies is not null)
                {
                @foreach (var company in companies)
                {
                <option value="@company.Id" selected="@(company.Id == user.CompanyId)">@company.Name</option>
                }
                }
                </select>
                </div>
                </div>
                </div>*@
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private User? user;
    private List<Company>? companies;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
        await LoadCompaniesAsync();
    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await repository.Get<User>($"/api/accounts");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        user = responseHTTP.Response;
    }

    private async Task CompanyChangedAsync(ChangeEventArgs e)
    {
        var selectedCompany = Convert.ToInt32(e.Value!);
    }

    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.Get<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        companies = responseHttp.Response;
    }

    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.Put<User>("/api/accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        navigationManager.NavigateTo("/");
    }
}
