@page "/register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person" /> @title
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Registrar</button>
                <a class="btn btn-sm btn-success float-end mx-2" href="/users"><i class="oi oi-arrow-thick-left"></i> Regresar</a>

            </span>
        </div>
        <div class="card-body">


            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                            <ValidationMessage For="@(() => userDTO.FirstName)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Apellido:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                            <ValidationMessage For="@(() => userDTO.LastName)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Documento:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Document" />
                            <ValidationMessage For="@(() => userDTO.Document)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Teléfono:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                            <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Email" />
                            <ValidationMessage For="@(() => userDTO.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        
                        @if (userType !=0)
                        {
                            <label>Empresa:</label>
                            <div>
                                <select class="form-select" @bind="userDTO.CompanyId">
                                    <option value="0">-- Seleccione una Empresa --</option>
                                    @if (companies is not null)
                                    {
                                        @foreach (var company in companies)
                                        {
                                            <option value="@company.Id">@company.Name</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => userDTO.CompanyId)" />
                            </div>
                        }
                        
                    </div>

                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                            <ValidationMessage For="@(() => userDTO.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmación de contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                            <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private UserDTO userDTO = new();
    private List<Company>? companies;
    private String? title;

    [Parameter]
    [SupplyParameterFromQuery]
    public int userType { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        if (userType == 0)
        {
            title = "Registrar Nuevo Administrador";
            userDTO.CompanyId = 1;
        }
        else if (userType == 1)
        {
            title = "Registrar Nuevo Usuario Web";
        }
        else
        {
            title = "Registrar Nuevo Usuario App";
        }
    }


    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.Get<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        companies = responseHttp.Response;
    }



    private async Task CreateUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        if (userType==0)
        {
            userDTO.UserType = UserType.Admin;
        }
        else if (userType == 1)
        {
            userDTO.UserType = UserType.UserWeb;
        }
        else 
        {
            userDTO.UserType = UserType.UserApp;
        }

        userDTO.Active = true;
        var responseHttp = await repository.Post<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Confirmación", "La cuenta ha sido creada con éxito. Se ha enviado un correo electrónico con las instrucciones para activar el usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/users");
    }
}
