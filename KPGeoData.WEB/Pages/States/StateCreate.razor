@page "/states/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<StateForm @ref="stateForm" State="state" OnValidSubmit="CreateAsync" ReturnAction="Return" Titulo="Crear Estado"/>

@code {
    private State state = new();
    private StateForm? stateForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        var httpResponse = await repository.Post("/api/states", state);
        if (httpResponse.Error)
        {
            var messageError = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        //stateForm!.FormPostedSuccessfully = true;
        //navigationManager.NavigateTo("/states");
    }   

    private void Return()
    {
        stateForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/states");
    }
}
