@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />


    <div class="mb-3">
        <label>Item:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Item.Name" />
            <ValidationMessage For="@(() => Item.Name)" />
        </div>
    </div>


    <div class="mb-3">
        <label>Dirección:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Item.Address" />
            <ValidationMessage For="@(() => Item.Address)" />
        </div>
    </div>
@*
    <div class="mb-3">
        <label>Latitud:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Item.Latitude.ToString()" />
            <ValidationMessage For="@(() => Item.Latitude.ToString())" />
        </div>
    </div>

    <div class="mb-3">
        <label>Longitud:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Item.Longitude.ToString()" />
            <ValidationMessage For="@(() => Item.Longitude.ToString())" />
        </div>
    </div>*@

      <div class="mb-3">
        <label>Localidad:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Item.Locality" />
            <ValidationMessage For="@(() => Item.Locality)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Activo:</label>
        <div>
            <input type="checkbox" @bind="@Item.Active">
        </div>
    </div>
   


    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Item Item { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Item);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
