@page "/itemTypes/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]


<ItemTypeForm @ref="itemTypeForm" ItemType="itemType" OnValidSubmit="CreateAsync" ReturnAction="Return" Titulo=" Crear Item" />

@code {
    private ItemType itemType = new();
    private ItemTypeForm? itemTypeForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;


    private async Task CreateAsync()
    {
        var httpResponse = await repository.Post("/api/itemtypes", itemType);
        if (httpResponse.Error)
        {
            var messageError = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        //itemTypeForm!.FormPostedSuccessfully = true;
        //navigationManager.NavigateTo("/itemTypes");
    }   

    private void Return()
    {
        itemTypeForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/itemTypes");
    }
}
