@page "/itemTypes"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]


@if (itemTypes is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Items
                <a class="btn btn-sm btn-primary float-end" href="/itemTypes/create"><i class="oi oi-plus"></i> Nuevo Item</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Item..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPage" />

            <GenericList MyList="itemTypes">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Evento</th>
                                <th>Activo</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var itemType in itemTypes!)
                            {
                                <tr>
                                    <td>
                                        @itemType.Name
                                    </td>
                                    <td>
                                        @itemType.Active
                                    </td>

                                    <td>
                                        <a href="/itemTypes/edit/@itemType.Id" class="btn btn-warning btn-sm">Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(itemType.Id))>Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    public List<ItemType>? itemTypes { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/itemTypes?page={page}";
            url2 = $"/api/itemTypes/totalPages";
        }
        else
        {
            url1 = $"/api/itemTypes?page={page}&filter={Filter}";
            url2 = $"/api/itemTypes/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<ItemType>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            itemTypes = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var httpResponse = await repository.Delete($"/api/itemTypes/{id}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messageError = await httpResponse.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }
        }
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro eliminado con éxito.");
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }
}