@page "/companies/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Empresa</h3>

@if (company is null)
{
    <p>Cargando...</p>
}
else
{
    <CompanyForm @ref="companyForm" Company="company" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Company? company;
    private CompanyForm? companyForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Company>($"/api/companies/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("companies");
                return;
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }
        }
        company = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var httpResponse = await repository.Put("/api/companies", company);
        if (httpResponse.Error)
        {
            var messageError = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        companyForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/companies");
    }

    private void Return()
    {
        companyForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/companies");
    }
}
