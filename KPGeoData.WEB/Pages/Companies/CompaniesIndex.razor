@page "/companies"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Empresas</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary btn-sm" href="/companies/create">Nueva Empresa</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Empresa..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>


<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />




<GenericList MyList="companies">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:220px">Empresa</th>
                    <th style="width:220px">Domicilio</th>
                    <th style="width:220px">Teléfono</th>
                    <th style="width:220px">CUIT</th>
                    <th style="width:220px">EMail</th>
                    <th style="width:220px">Contacto</th>
                    <th style="width:120px">Activo</th>
                    <th style="width:260px">Relevam.</th>
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var company in companies!)
                {
                    <tr>
                        <td>
                            @company.Name
                        </td>
                        <td>
                            @company.Address
                        </td>
                        <td>
                            @company.Phone
                        </td>
                        <td>
                            @company.CUIT
                        </td>
                        <td>
                            @company.EMail
                        </td>
                        <td>
                            @company.Contact
                        </td>
                        <td>
                            @company.Active
                        </td>
                        @*<td>
                            <input type="checkbox" checked= @company.Active">
                        </td>*@
                        <td>
                            @company.SurveysNumber
                        </td>


                        <td>
                            <a href="/companies/details/@company.Id" class="btn btn-info btn-sm">Detalles</a>
                            <a href="/companies/edit/@company.Id" class="btn btn-warning btn-sm">Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(company.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Company>? companies { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/companies?page={page}";
            url2 = $"/api/companies/totalPages";
        }
        else
        {
            url1 = $"/api/companies?page={page}&filter={Filter}";
            url2 = $"/api/companies/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Company>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        companies = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var httpResponse = await repository.Delete($"/api/companies/{id}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messageError = await httpResponse.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}