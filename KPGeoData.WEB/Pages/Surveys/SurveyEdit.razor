@page "/surveys/edit/{SurveyId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Relevamiento</h3>

@if (survey is null)
{
     <div class="spinner"/>
}
else
{
    <SurveyForm @ref="surveyForm" Survey="survey" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Survey? survey;
    private SurveyForm? surveyForm;

    [Parameter]
    public int SurveyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Survey>($"/api/surveys/{SurveyId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/companies");
                return;
            }

            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        survey = responseHttp.Response;
        var a = 1;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/surveys", survey);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        surveyForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/companies/details/{survey!.CompanyId}");
    }
}
