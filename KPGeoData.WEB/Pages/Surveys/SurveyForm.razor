@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnDataAnnotationsValidatedAsync">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header">
            <span>
                <i class="oi oi-person" /> @Titulo
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                <button class="btn btn-success btn-sm float-end mx-2" @onclick="ReturnAction"><i class="oi oi-arrow-thick-left"></i> Regresar</button>
            </span>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">

                    <div class="mb-3">
                        <label>Relevamiento:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@SurveyDTO.Name" />
                            <ValidationMessage For="@(() => SurveyDTO.Name)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label>Activo:</label>
                        <div>
                            <input type="checkbox" @bind="@SurveyDTO.Active">
                        </div>
                    </div>
                    <div class="mb-3">
                    <label>Estados:</label>
                    <div>
                        <MultipleSelector NonSelected="nonSelectedStates" Selected="selectedStates" />
                    </div>
                </div>
                </div>

                <div class="col-6">
                    <div class="mb-3">
                        <label>Eventos:</label>
                        <div>
                            <MultipleSelector NonSelected="nonSelectedEvents" Selected="selectedEvents" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Items:</label>
                        <div>
                            <MultipleSelector NonSelected="nonSelectedItems" Selected="selectedItems" />
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;

    private List<MultipleSelectorModel> selectedStates { get; set; } = new();
    private List<MultipleSelectorModel> nonSelectedStates { get; set; } = new();

    private List<MultipleSelectorModel> selectedEvents { get; set; } = new();
    private List<MultipleSelectorModel> nonSelectedEvents { get; set; } = new();

    private List<MultipleSelectorModel> selectedItems { get; set; } = new();
    private List<MultipleSelectorModel> nonSelectedItems { get; set; } = new();

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public SurveyDTO SurveyDTO { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public string Titulo { get; set; } = null!;

    [Parameter]
    public List<State> SelectedStates { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<State> NonSelectedStates { get; set; } = new();

    [Parameter]
    public List<EventType> SelectedEvents { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<EventType> NonSelectedEvents { get; set; } = new();

    [Parameter]
    public List<ItemType> SelectedItems { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<ItemType> NonSelectedItems { get; set; } = new();

    public bool FormPostedSuccessfully { get; set; } = false;

    protected override void OnInitialized()
    {
        editContext = new(SurveyDTO);
        selectedStates = SelectedStates.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        nonSelectedStates = NonSelectedStates.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        selectedEvents = SelectedEvents.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        nonSelectedEvents = NonSelectedEvents.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        selectedItems = SelectedItems.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        nonSelectedItems = NonSelectedItems.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
    }

    private async Task OnDataAnnotationsValidatedAsync()
    {
        SurveyDTO.StateIds = selectedStates.Select(x => int.Parse(x.Key)).ToList();
        SurveyDTO.ItemTypeIds = selectedItems.Select(x => int.Parse(x.Key)).ToList();
        SurveyDTO.EventTypeIds = selectedEvents.Select(x => int.Parse(x.Key)).ToList();
        await OnValidSubmit.InvokeAsync();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
