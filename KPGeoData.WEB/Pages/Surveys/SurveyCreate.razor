@page "/surveys/create/{CompanyId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin, UserWeb")]

<SurveyForm @ref="surveyForm" Survey="survey" OnValidSubmit="Create" ReturnAction="Return" Titulo="Crear Relevamiento" />

@code {
    private Survey survey = new();
    private SurveyForm? surveyForm;
    private User? userLogged;

    [Parameter]
    public int CompanyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userResponseHppt = await repository.Get<User>("/api/accounts");
        userLogged = userResponseHppt.Response!;
    }
    private async Task Create()
    {

        survey.CompanyId = CompanyId;
        var httpResponse = await repository.Post("/api/surveys", survey);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        surveyForm!.FormPostedSuccessfully = true;
        if (userLogged.UserType==UserType.Admin)
        {
            navigationManager.NavigateTo($"/companies/details/{CompanyId}");
        }
        else
        {
            navigationManager.NavigateTo($"/surveysbycompany");
        }
    }
}
